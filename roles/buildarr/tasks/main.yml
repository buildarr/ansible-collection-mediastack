---

- name: Set common default variables
  ansible.builtin.import_role:
    name: common

- name: Initialise temporary variables
  ansible.builtin.set_fact:
    mediastack_temp_api_keys: {}

- name: Install Python lxml library (for reading service API keys from file)
  ansible.builtin.apt:
    name: python3-lxml
    cache_valid_time: "{{ mediastack_apt_cache_time }}"

- name: Create service directory
  ansible.builtin.file:
    state: directory
    path: /opt/mediastack/buildarr
    owner: root
    group: docker
    mode: "0755"

- name: Create service definition file
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: /opt/mediastack/buildarr/docker-compose.yml
    owner: root
    group: docker
    mode: "0640"
  notify: stop buildarr

- name: Validate service definition file
  ansible.builtin.command:
    cmd: docker compose --file docker-compose.yml config --quiet
    chdir: /opt/mediastack/buildarr
  changed_when: false

- name: Flush handlers (to stop service as required)
  ansible.builtin.meta: flush_handlers

- name: Create configuration directory
  ansible.builtin.file:
    state: directory
    path: /opt/mediastack/buildarr/config
    owner: mediastack
    group: mediastack
    mode: "0750"

- name: Fetch Sonarr API keys from file
  community.general.xml:
    path: "/opt/mediastack/sonarr/{{ item.name }}/config/config.xml"
    xpath: /Config/ApiKey
    content: text
  register: mediastack_temp_sonarr_apikeys
  loop: "{{ mediastack_sonarr_instances }}"
  loop_control:
    label: "{{ item.name }}"

- name: Fetch Radarr API keys from file
  community.general.xml:
    path: "/opt/mediastack/radarr/{{ item.name }}/config/config.xml"
    xpath: /Config/ApiKey
    content: text
  register: mediastack_temp_radarr_apikeys
  loop: "{{ mediastack_radarr_instances }}"
  loop_control:
    label: "{{ item.name }}"

- name: Parse Sonarr and Radarr API keys
  ansible.builtin.set_fact:
    mediastack_temp_api_keys: >-
      {{ mediastack_temp_api_keys | combine({item.item.name: item.matches[0].ApiKey}) }}
  loop: "{{ mediastack_temp_sonarr_apikeys.results + mediastack_temp_radarr_apikeys.results }}"
  loop_control:
    label: "{{ item.item.name }}"

- name: Fetch Prowlarr API key from file
  community.general.xml:
    path: /opt/mediastack/prowlarr/config/config.xml
    xpath: /Config/ApiKey
    content: text
  register: mediastack_temp_prowlarr_apikey

- name: Parse Prowlarr API key
  ansible.builtin.set_fact:
    mediastack_temp_api_keys: >-
      {{
        mediastack_temp_api_keys
        | combine({'prowlarr': mediastack_temp_prowlarr_apikey.matches[0].ApiKey})
      }}

- name: Fetch Jellyseerr API key from file
  ansible.builtin.slurp:
    src: /opt/mediastack/jellyseerr/config/settings.json
  register: mediastack_temp_jellyseerr_settings

- name: Parse Jellyseerr API key
  ansible.builtin.set_fact:
    mediastack_temp_api_keys: >-
      {{
        mediastack_temp_api_keys
        | combine(
            {
              'jellyseerr': (
                mediastack_temp_jellyseerr_settings.content | b64decode | from_json
              ).main.apiKey
            }
          )
      }}

- name: Create Buildarr configuration files
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/opt/mediastack/buildarr/config/{{ item }}"
    owner: root
    group: mediastack
    mode: "0640"
  loop:
    - buildarr.yml
    - sonarr.yml
    - radarr.yml
    - prowlarr.yml
    - jellyseerr.yml
  notify: reload buildarr

- name: Start service
  ansible.builtin.command:
    cmd: docker compose --ansi never --progress plain --file docker-compose.yml up --detach
    chdir: /opt/mediastack/buildarr
  register: mediastack_temp_service_start
  changed_when: "'Started' in mediastack_temp_service_start.stdout"
